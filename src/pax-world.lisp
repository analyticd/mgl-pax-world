(in-package :mgl-pax-world)

(defsection @mgl-pax-world-manual (:title "PAX World Manual")
  (mgl-pax-world asdf:system)
  (@mgl-pax-world-basics section))

(defsection @mgl-pax-world-basics (:title "Basics")
  "Not that there is room here to be non-basic in any way."
  (*pax-world-sections* variable)
  (update-pax-world function))

(defparameter *pax-world-sections*
  (list mgl-pax:@mgl-pax-manual
        @mgl-pax-world-manual
        mgl-gpr:@gpr-manual
        mgl-cube:@cube-manual
        mgl-mat:@mat-manual
        mgl:@mgl-manual)
  "The default list of sections for which UPDATE-PAX-WORLD generates
  documentation.")

(defparameter *pax-world-dir*
  (asdf:system-relative-pathname :mgl-pax-world "./"))

(defun update-pax-world (&key (sections *pax-world-sections*))
  "Delete all HTML files from the root of the MGL-PAX-WORLD asdf
  system and generate documentation for all SECTIONS."
  (update-readmes)
  (delete-pax-world)
  (create-pax-world sections))

(defun update-readmes ()
  ;; README.md has anchors, links, inline code, and other markup
  ;; added. Not necessarily the easiest on the eye in text, but looks
  ;; good on github.
  (with-open-file (stream (asdf:system-relative-pathname :mgl-pax-world
                                                         "README.md")
                          :direction :output
                          :if-does-not-exist :create
                          :if-exists :supersede)
    (document @mgl-pax-world-manual :stream stream)
    (print-markdown-footer stream))
  ;; README is optimized for reading in text format. Has no links and
  ;; cluttery markup.
  (with-open-file (stream (asdf:system-relative-pathname :mgl-pax-world
                                                         "README")
                          :direction :output
                          :if-does-not-exist :create
                          :if-exists :supersede)
    (describe @mgl-pax-world-manual stream)
    (print-markdown-footer stream)))

(defun print-markdown-footer (stream)
  (format stream "~%* * *~%")
  (format stream "###### \\[generated by ~
                   [MGL-PAX](https://github.com/melisgl/mgl-pax)\\]~%"))

(defun delete-pax-world ()
  (map nil #'delete-file
       (directory (merge-pathnames "*.html" *pax-world-dir*))))

(defsection @mgl-pax-world (:title "PAX World")
  "This is a list of documents generated with MGL-PAX in the default
  style. The documents are cross-linked: links to other documents are
  added automatically when a reference is found.")

(defun create-pax-world (sections)
  (set-pax-world-list sections)
  (document (cons @mgl-pax-world sections)
            :pages (cons (section-to-page-spec
                          @mgl-pax-world
                          :filename (merge-pathnames "index.html"
                                                     *pax-world-dir*))
                         (loop for section in sections
                               collect (section-to-page-spec
                                        section :dir *pax-world-dir*
                                        :link-to-pax-world-p t)))
            :format :html))

(defun section-to-filename (section &key (dir "doc/"))
  (let ((name (string-downcase
               (remove-special-chars (symbol-name (section-name section))))))
    (asdf:system-relative-pathname
     :mgl-pax (merge-pathnames (format nil "~a.html" name)
                               dir))))

(defun remove-special-chars (string)
  (remove-if (lambda (char)
               (find char "!@#$%^&*"))
             string))

(defun section-to-page-spec (section &key
                             (open-args '(:if-does-not-exist :create
                                          :if-exists :supersede
                                          :ensure-directories-exist t))
                             (dir "doc/")
                             (filename (section-to-filename section :dir dir))
                             link-to-pax-world-p)
  (flet ((header (title stream)
           (html-header stream :title title
                        :stylesheet "style.css" :charset "UTF-8"
                        :link-to-pax-world-p link-to-pax-world-p))
         (footer (stream)
           (html-footer stream)))
    `(:objects
      (,section)
      :output (,filename ,@open-args)
      :header-fn ,(lambda (stream)
                    (header (section-title section) stream))
      :footer-fn ,#'footer)))

(defun html-header (stream &key title stylesheet (charset "UTF-8")
                    link-to-pax-world-p)
  (format
   stream
   "<!DOCTYPE html>~%~
   <html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>~%~
   <head>~%~
   ~@[<title>~A</title>~]~%~
   ~@[<link type='text/css' href='~A' rel='stylesheet'/>~]~%~
   ~@[<meta http-equiv=\"Content-Type\" ~
            content=\"text/html; ~
            charset=~A\"/>~]~%~
   <script src=\"jquery.min.js\"></script>~%~
   <script src=\"toc.min.js\"></script>~%~
   </head>~%~
   <body>~%~
   <div id=\"content-container\">~%~
     <div id=\"toc\">~%~
       ~:[~;<div id=\"toc-header\"><ul><li><a href=\"index.html\">~
            PAX World</a></li></ul></div>~%~]~
       <div id=\"page-toc\">~%~
       </div>~%~
       <div id=\"toc-footer\">~
         <ul><li><a href=\"https://github.com/melisgl/mgl-pax\">[generated ~
             by MGL-PAX]</a></li></ul>~
       </div>~%~
     </div>~%~
     <div id=\"content\">~%"
   title stylesheet charset link-to-pax-world-p))

(defun html-footer (stream)
  (format
   stream
   "  </div>~%~
   </div>~%~
   <script>$('#page-toc').toc();</script>~
   </body>~%</html>~%"))

(defun set-pax-world-list (objects)
  (setf (slot-value @mgl-pax-world 'mgl-pax::entries)
        (list (first (section-entries @mgl-pax-world))
              (with-output-to-string (stream)
                (dolist (object objects)
                  (format stream "- ~S~%~%" (section-name object)))))))

#|

(update-pax-world)

|#
